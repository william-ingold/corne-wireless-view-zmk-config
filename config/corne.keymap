/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  ;  | BKSP |
// | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |  '   |
// | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | RALT |
//                    | GUI | CDE | SPC |   | ENT | SYM  | MSC |
                        label = "Base";
                        bindings = <
   &kp TAB   &kp Q &kp W &kp F &kp P &kp B   &kp J &kp L  &kp U     &kp Y   &kp SEMI &kp BSPC
   &kp LCTRL &kp A &kp R &kp S &kp T &kp G   &kp M &kp N  &kp E     &kp I   &kp O    &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp D &kp V   &kp K &kp H  &kp COMMA &kp DOT &kp FSLH &kp RALT
                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &mo 3
                        >;
                };

                coding {
// -----------------------------------------------------------------------------------------
// |  TAB | ESC |  <  |  $  |  >  |  ~  |   |  ^  |  [   |  -  |  ]  |  :   | DEL  |
// | CTRL |  @  |  (  |  "  |  )  |  #  |   |  %  |  {   |  =  |  }  | BKSP |  |   |
// | SHFT |  !  |  *  |  :  |  &  |HOME |   | END |  +   |  _  |  `  |  \   | CAPS |
//                    | GUI | LWR | SPC |   | ENT |  ;   |     |
                        label = "Coding";
                        bindings = <
   &trans &kp ESC  &kp LT   &kp DLLR  &kp GT   &kp TILDE    &kp CARET &kp LBKT  &kp  MINUS  &kp RBKT   &kp COLON  &kp DEL
   &trans &kp AT   &kp LPAR &kp DQT   &kp RPAR &kp HASH     &kp PRCNT &kp LBRC  &kp  EQUAL  &kp RBRC   &kp BKSP   &kp PIPE
   &trans &kp EXCL &kp STAR &kp COLON &kp AMPS &kp HOME     &kp END   &kp PLUS  &kp UNDER   &kp GRAVE  &kp FSLH   &kp CAPS
                  &kp LGUI &mo 1 &kp SPACE   &kp RET &kp SEMI &trans
                        >;
                };


                num_nav_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  +  |  7  |  8  |  9  |  %  |   |  ^  |  &  |  UP  |  *  |  )  | BKSP |
// | CTRL |  =  |  4  |  5  |  6  | HOME|   | END | LEFT| DOWN |RIGHT|  : |   \   |
// | SHFT |  -  |  1  |  2  |  3  |  0  |   | +   |  CP  |  PST  |  CUT  | UNDO |  RALT   |
//                    | GUI |     | SPC |   | ENT |      |     |
                        label = "Num_nav";
                        bindings = <
   &kp  TAB  &kp PLUS  &kp N7 &kp N8 &kp N9 &kp PRCNT    &kp CARET &kp AMPS  &kp UP    &kp STAR  &kp RPAR  &trans
   &kp LCTRL &kp EQUAL &kp N4 &kp N5 &kp N6 &kp HOME     &kp END   &kp LEFT  &kp DOWN  &kp RIGHT &kp COLON &kp FSLH
   &kp LSHFT &kp MINUS &kp N1 &kp N2 &kp N3 &kp N0       &kp PLUS  &kp LC(C) &kp LC(V) &kp LC(X) &kp LC(Z) &trans
                    	      &kp LGUI &trans &kp SPACE    &kp RET   &trans    &trans
                        >;
                };

                misc {
// -----------------------------------------------------------------------------------------
// |  F1  |  F2  |  F3  |  F4  |  F5  |  F6 |    |  F7  |  F8  |  F9  |  F10  |  F11  |  F12 |
// | BTCLR| BT1  | BT2  | BT3  | BT4  | BT5 |    | PREV |  VDN |  VUP |  NXT  |   PLY |      |
// | SHFT |     |     |     |     |     |   |    |  RW  |  FF  |      |       |       |      |
//                        | GUI |     | SPC |    | ENT  |      |      |
                        label = "Misc";
                        bindings = <
   &kp F1     &kp F2       &kp F3       &kp F4       &kp F5       &kp F6         &kp F7     &kp F8         &kp F9       &kp F10    &kp F11  &kp F12
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp C_PREV &kp C_VOL_DN   &kp C_VOL_UP &kp C_NEXT &kp C_PP &trans
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans     &kp C_RW       &kp C_FF     &trans     &trans   &trans
                          	            &kp LGUI     &trans       &kp SPACE      &kp RET    &trans         &kp trans
                        >;
                };

        };
};
